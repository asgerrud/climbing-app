generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  created_at    DateTime @default(now())
  Note          Note[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
// ---

model Location {
  id         String     @id @default(cuid())
  name       String
  lat        Float
  lon        Float
  createdAt  DateTime   @default(now()) @map("created_at")
  updatedAt  DateTime   @updatedAt @map("updated_at")
  categories Category[]
  type       Type[]
}

model Type {
  id        String     @id @default(cuid())
  name      String
  locations Location[]
}

model Category {
  id        Int        @id @default(autoincrement())
  name      String
  iconUrl   String
  locations Location[]
}

model Note {
  id        String  @id @default(cuid())
  title     String
  content   String?
  created_at DateTime @default(now())
  updated_at DateTime
  authorId  String
  user      User?  @relation(fields: [authorId], references: [id])
}